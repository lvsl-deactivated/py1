# coding: utf-8

# Работа с последовательностям и в python

# Последовательностями а python являются
#  следующие типы данных:
#  - строки: str, unicode
#  - списки: list, tuple

# Все последовательности поддерживают следующие методы:

# 1. Оператор "in" (поиск элемента в последовательности)
#    Выражение <элемент> in <последовательность>
#    возвращаете True если <элемент> содержится в
#    последовательности, иначе False

print "a" in "abc"
print "d" in "abc"
print 1 in [1,2,3]
print 2 in []
print True in (True, False, None)
print 1 in (-1,0,2)

# также есть конструкция симметричная in: not in

print "a" not in "abc"
print "d" not in "abc"
print 1 not in [1,2,3]
print 2 not in []
print True not in (True, False, None)
print 1 not in (-1,0,2)

# 2. Оператор "+" Конкатенация (соединения последовательностей)
#    выражение <посл.1> + <посл.2> создает и возвращает
#    новую последовательность, состоящую из элементов
#    посл.1 и посл.2. Порядок сохраняется!
#
print "a" + "b"
print [1] + [2]
print (1,) + (2,) # Запятая в конце обязательна! Иначе python
print (1) + (2)   # решит что (1) это просто 1 в скобках

# 3. оператор "*" тиражирование последовательностей
#    выражение <посл> * n == <посл> + <посл> + ... + <посл>
print "=" * 10
print [1,2,3] * 5
print [[]] * 10 # осторожно!
a = [[]] * 10
print a
a[0].append("WHOA!")
print a

# 4. Оператор "[i]" обращение по индексу
#    Выражение <посл.>[i] возвращает i-ый элемент
#    последовательности.
print "abc"[0] # индексация с нуля
print [1,2,4][2]
print ("foo", "bar", "baz")[1] # Элементами последовательносткей
                               # могут быть другие последовательности

# индекс может быть отрицателным (идём от конца-к-началу)
print "abc"[-1]
print [1,2,3][-3]

# 5. оператор "[i:j]" выделение подпоследовательности
print "oh oh oh is soo boring"[3:10]
print "abcd"[-4:-1]
print [1,2,3,4][:] # идиома; скопировать список

# 6. оператор "[i:j:k]" выделение подпоследовательности с шагом
#    выражние <посл>[i:j:k] выбирает из последовательности
#    [i, i + k, i + 2*k, i + 3*k, ...]
print "a_a_a_a_a_a_a_a"[::2] # выбрать все нечётные элементы
print "a_a_a_a_a_a_a_a"[1::2] # выбрать все чётные элементы
print "abcd"[::-1] # перевернуть последовательность

# 7. Функции и методы для работы с последовательностями

print len([1,2,3])
print max("abc")
print min((1,2,-3))
print [1,2,3,2].index(2)
print "abcaaaa".count("a")

# Упражения:
#
# 1. напишите комментарий над каждой строкой, разберитесь
#    как работают последовательности
#
# 2. Что такое изменяемые(mutable) и неизменяемые(immutable)
#    структуры данных?
#    Подсказка: list VS tuple
